{
  "env": {
    "es2021": true
  },
  "extends": ["plugin:@typescript-eslint/recommended"],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": "latest",
    "project": ["./tsconfig.json", "./scripts/tsconfig.json"],
    "sourceType": "module"
  },
  "plugins": ["@typescript-eslint"],
  "rules": {
    "@typescript-eslint/array-type": [
      "warn",
      {
        "default": "array"
      }
    ],
    "@typescript-eslint/await-thenable": "warn",
    "@typescript-eslint/ban-ts-comment": "warn",
    "@typescript-eslint/ban-types": "warn",
    "@typescript-eslint/consistent-generic-constructors": "warn",
    "@typescript-eslint/consistent-indexed-object-style": "warn",
    "@typescript-eslint/consistent-type-imports": "warn",
    "@typescript-eslint/explicit-function-return-type": [
      "warn",
      {
        "allowIIFEs": true
      }
    ],
    "@typescript-eslint/explicit-module-boundary-types": "warn",
    "@typescript-eslint/member-ordering": [
      "warn",
      {
        "default": {
          "memberTypes": [
            // Index signature
            "signature",
            "call-signature",
            // Fields
            "public-static-field",
            "protected-static-field",
            "private-static-field",
            "#private-static-field",
            "public-decorated-field",
            "protected-decorated-field",
            "private-decorated-field",
            "public-instance-field",
            "protected-instance-field",
            "private-instance-field",
            "#private-instance-field",
            "public-abstract-field",
            "protected-abstract-field",
            "public-field",
            "protected-field",
            "private-field",
            "#private-field",
            "static-field",
            "instance-field",
            "abstract-field",
            "decorated-field",
            "field",
            // Static initialization
            "static-initialization",
            // Constructors
            "public-constructor",
            "protected-constructor",
            "private-constructor",
            "constructor",
            // Getters
            "public-static-get",
            "protected-static-get",
            "private-static-get",
            "#private-static-get",
            "public-decorated-get",
            "protected-decorated-get",
            "private-decorated-get",
            "public-instance-get",
            "protected-instance-get",
            "private-instance-get",
            "#private-instance-get",
            "public-abstract-get",
            "protected-abstract-get",
            "public-get",
            "protected-get",
            "private-get",
            "#private-get",
            "static-get",
            "instance-get",
            "abstract-get",
            "decorated-get",
            "get",
            // Setters
            "public-static-set",
            "protected-static-set",
            "private-static-set",
            "#private-static-set",
            "public-decorated-set",
            "protected-decorated-set",
            "private-decorated-set",
            "public-instance-set",
            "protected-instance-set",
            "private-instance-set",
            "#private-instance-set",
            "public-abstract-set",
            "protected-abstract-set",
            "public-set",
            "protected-set",
            "private-set",
            "#private-set",
            "static-set",
            "instance-set",
            "abstract-set",
            "decorated-set",
            "set",
            // Methods
            "public-static-method",
            "protected-static-method",
            "private-static-method",
            "#private-static-method",
            "public-decorated-method",
            "protected-decorated-method",
            "private-decorated-method",
            "public-instance-method",
            "protected-instance-method",
            "private-instance-method",
            "#private-instance-method",
            "public-abstract-method",
            "protected-abstract-method",
            "public-method",
            "protected-method",
            "private-method",
            "#private-method",
            "static-method",
            "instance-method",
            "abstract-method",
            "decorated-method",
            "method"
          ],
          "order": "alphabetically"
        }
      }
    ],
    "@typescript-eslint/method-signature-style": "warn",
    "@typescript-eslint/naming-convention": [
      "warn",
      {
        "format": ["camelCase", "PascalCase"],
        "selector": "default"
      },
      {
        "format": ["camelCase", "PascalCase"],
        "leadingUnderscore": "allow",
        "selector": "method"
      },
      {
        "format": ["PascalCase"],
        "selector": "class"
      },
      {
        "format": ["PascalCase"],
        "selector": "typeLike"
      },
      {
        "format": ["UPPER_CASE"],
        "selector": "enumMember"
      },
      {
        "format": ["camelCase", "UPPER_CASE"],
        "leadingUnderscore": "allow",
        "selector": "variableLike"
      },
      {
        "format": ["camelCase", "PascalCase", "snake_case"],
        "selector": "objectLiteralProperty"
      }
    ],
    "@typescript-eslint/no-base-to-string": "warn",
    "@typescript-eslint/no-confusing-non-null-assertion": "warn",
    "@typescript-eslint/no-confusing-void-expression": "warn",
    "@typescript-eslint/no-duplicate-enum-values": "warn",
    "@typescript-eslint/no-duplicate-type-constituents": "warn",
    "@typescript-eslint/no-empty-interface": "warn",
    "@typescript-eslint/no-explicit-any": "warn",
    "@typescript-eslint/no-extra-non-null-assertion": "warn",
    "@typescript-eslint/no-floating-promises": "warn",
    "@typescript-eslint/no-invalid-void-type": "warn",
    "@typescript-eslint/no-misused-new": "warn",
    "@typescript-eslint/no-misused-promises": "warn",
    "@typescript-eslint/no-mixed-enums": "warn",
    "@typescript-eslint/no-namespace": 0,
    "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "warn",
    "@typescript-eslint/no-non-null-asserted-optional-chain": "warn",
    "@typescript-eslint/no-non-null-assertion": "warn",
    "@typescript-eslint/no-unnecessary-boolean-literal-compare": "warn",
    "@typescript-eslint/no-unnecessary-condition": "warn",
    "@typescript-eslint/no-unnecessary-qualifier": "warn",
    "@typescript-eslint/no-unnecessary-type-arguments": "warn",
    "@typescript-eslint/no-unnecessary-type-assertion": "warn",
    "@typescript-eslint/no-unnecessary-type-constraint": "warn",
    "@typescript-eslint/no-unsafe-enum-comparison": "warn",
    "@typescript-eslint/no-unsafe-member-access": "warn",
    "@typescript-eslint/no-unsafe-return": "warn",
    "@typescript-eslint/no-unused-vars": "off",
    "@typescript-eslint/no-useless-empty-export": "warn",
    "@typescript-eslint/no-var-requires": "warn",
    "@typescript-eslint/prefer-enum-initializers": "warn",
    "@typescript-eslint/prefer-for-of": "warn",
    "@typescript-eslint/prefer-function-type": "warn",
    "@typescript-eslint/prefer-literal-enum-member": "warn",
    "@typescript-eslint/prefer-reduce-type-parameter": "warn",
    "@typescript-eslint/prefer-ts-expect-error": "warn",
    "@typescript-eslint/promise-function-async": "warn",
    "@typescript-eslint/require-await": "warn",
    "@typescript-eslint/restrict-plus-operands": "warn",
    "@typescript-eslint/sort-type-constituents": "warn",
    "@typescript-eslint/switch-exhaustiveness-check": "warn",
    // Note: you must disable the base rule as it can report incorrect errors
    "require-await": "off"
  }
}
