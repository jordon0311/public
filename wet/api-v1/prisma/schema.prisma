// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

enum AuthProvider {
  Firebase
}

enum Opinion {
  Dislike
  Like
  None
}

model Chapter {
  id           String        @id @default(nanoid())
  title        String
  content      String
  ChapterStory ChapterStory?

  @@map("chapter")
}

model ChapterStory {
  id           String @id @default(nanoid())
  chapterId    String @unique
  chapterIndex Int
  storyId      String

  chapter Chapter @relation(onDelete: Cascade, fields: [chapterId], references: [id])
  story   Story   @relation(onDelete: Cascade, fields: [storyId], references: [id])

  @@unique([chapterIndex, storyId])
  @@map("chapter_story")
}

model Story {
  id    String @id @default(nanoid())
  title String

  StoryUser     StoryUser?
  ChapterStory  ChapterStory[]
  StoryReaction StoryReaction[]

  @@map("story")
}

model StoryReaction {
  id      String @id @default(nanoid())
  storyId String
  userId  String

  opinion Opinion

  story Story @relation(onDelete: Cascade, fields: [storyId], references: [id])
  user  User  @relation(onDelete: Cascade, fields: [userId], references: [id])

  @@unique([storyId, userId])
  @@map("story_reaction")
}

model StoryUser {
  id      String @id @default(nanoid())
  storyId String @unique
  userId  String

  story Story @relation(onDelete: Cascade, fields: [storyId], references: [id])
  user  User  @relation(onDelete: Cascade, fields: [userId], references: [id])

  @@map("story_user")
}

model User {
  id       String @id @default(nanoid())
  username String @unique
  email    String @unique

  profilePictureUrl String?

  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  StoryUser          StoryUser[]
  StoryReaction      StoryReaction[]
  UserAuthentication UserAuthentication[]

  @@map("user")
}

model UserAuthentication {
  id         String       @id @default(nanoid())
  externalId String
  provider   AuthProvider
  userId     String

  user User @relation(onDelete: Cascade, fields: [userId], references: [id])

  @@unique([externalId, provider])
  @@unique([userId, provider])
  @@map("user_authentication")
}
